<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="Mydb.php" path="/">
    <totals>
      <lines total="725" comments="183" code="542" executable="209" executed="195" percent="93.30"/>
      <methods count="30" tested="23" percent="76.67"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="sql\Mydb" start="51" executable="209" executed="195" crap="107.25">
      <namespace name="sql"/>
      <method name="__construct" signature="__construct(sql\MydbCredentialsInterface $credentials, Psr\Log\LoggerInterface $logger, ?sql\MydbOptionsInterface $options, ?sql\MydbMysqliInterface $mysqli, ?sql\MydbEnvironmentInterface $environment, ?sql\MydbQueryBuilderInterface $queryBuilder, ?sql\MydbListenerInterface $eventListener)" start="79" end="95" crap="1" executable="7" executed="7" coverage="100"/>
      <method name="__destruct" signature="__destruct()" start="104" end="108" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="async" signature="async(string $command): void" start="116" end="135" crap="7" executable="10" executed="10" coverage="100"/>
      <method name="open" signature="open(int $retry): bool" start="142" end="145" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="query" signature="query(string $query): ?array" start="157" end="187" crap="6" executable="13" executed="13" coverage="100"/>
      <method name="command" signature="command(string $query): bool" start="193" end="209" crap="3" executable="7" executed="7" coverage="100"/>
      <method name="getEnumValues" signature="getEnumValues(string $table, string $column): array" start="216" end="250" crap="7" executable="16" executed="16" coverage="100"/>
      <method name="escape" signature="escape($unescaped, string $quote): string" start="259" end="266" crap="2" executable="3" executed="3" coverage="100"/>
      <method name="getPrimaryKeys" signature="getPrimaryKeys(string $table): ?array" start="273" end="289" crap="7" executable="8" executed="8" coverage="100"/>
      <method name="beginTransaction" signature="beginTransaction(): void" start="294" end="311" crap="5" executable="9" executed="9" coverage="100"/>
      <method name="rollbackTransaction" signature="rollbackTransaction(): void" start="316" end="327" crap="3" executable="5" executed="5" coverage="100"/>
      <method name="commitTransaction" signature="commitTransaction(): void" start="333" end="344" crap="3" executable="5" executed="5" coverage="100"/>
      <method name="close" signature="close(): void" start="349" end="394" crap="14.40" executable="17" executed="11" coverage="64.705882352941"/>
      <method name="replace" signature="replace(string $query): ?string" start="400" end="403" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="insert" signature="insert(string $query): ?string" start="409" end="416" crap="2" executable="3" executed="3" coverage="100"/>
      <method name="select" signature="select(string $query): ?array" start="423" end="426" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="delete" signature="delete(string $query): ?int" start="431" end="443" crap="3" executable="6" executed="6" coverage="100"/>
      <method name="update" signature="update(string $query): ?int" start="448" end="460" crap="3.04" executable="6" executed="5" coverage="83.333333333333"/>
      <method name="deleteWhere" signature="deleteWhere(array $whereFields, string $table, array $whereNotFields): ?int" start="465" end="473" crap="2.06" executable="4" executed="3" coverage="75"/>
      <method name="updateWhere" signature="updateWhere(array $update, array $whereFields, string $table, array $whereNotFields): bool" start="479" end="490" crap="3.07" executable="5" executed="4" coverage="80"/>
      <method name="updateWhereMany" signature="updateWhereMany(array $columnSetWhere, array $where, string $table): void" start="498" end="502" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="insertMany" signature="insertMany(array $data, array $cols, string $table, bool $ignore, string $onDuplicateSql): void" start="510" end="519" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="replaceOne" signature="replaceOne(array $data, string $table): ?string" start="525" end="530" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="insertOne" signature="insertOne(array $data, string $table): ?string" start="536" end="541" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="setTransactionIsolationLevel" signature="setTransactionIsolationLevel(string $isolationLevel): void" start="547" end="553" crap="2" executable="3" executed="3" coverage="100"/>
      <method name="sendClientRequest" signature="sendClientRequest(string $query): bool" start="560" end="575" crap="2.01" executable="9" executed="8" coverage="88.888888888889"/>
      <method name="readServerResponse" signature="readServerResponse(string $query): ?sql\MydbMysqli\MydbMysqliResultInterface" start="580" end="606" crap="6.02" executable="13" executed="12" coverage="92.307692307692"/>
      <method name="onWarning" signature="onWarning(string $warningMessage, ?string $sql): void" start="608" end="611" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="onError" signature="onError(sql\MydbException $exception, ?string $sql): void" start="616" end="621" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="connect" signature="connect(int $retry): bool" start="632" end="723" crap="17.09" executable="44" executed="41" coverage="93.181818181818"/>
    </class>
    <coverage>
      <line nr="88">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="89">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="90">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="91">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="92">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="93">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="94">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="106">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="107">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="118">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
      </line>
      <line nr="119">
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
      </line>
      <line nr="122">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
      </line>
      <line nr="123">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
      </line>
      <line nr="124">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
      </line>
      <line nr="125">
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
      </line>
      <line nr="128">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
      </line>
      <line nr="129">
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
      </line>
      <line nr="132">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
      </line>
      <line nr="133">
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
      </line>
      <line nr="144">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="160">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="161">
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
      </line>
      <line nr="164">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="165">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="167">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="168">
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
      </line>
      <line nr="171">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="172">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="173">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="174">
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
      </line>
      <line nr="175">
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
      </line>
      <line nr="183">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="186">
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
      </line>
      <line nr="195">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="196">
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
      </line>
      <line nr="200">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="202">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="203">
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
      </line>
      <line nr="206">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="208">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="218">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
      </line>
      <line nr="220">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
      </line>
      <line nr="221">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
      </line>
      <line nr="222">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
      </line>
      <line nr="223">
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
      </line>
      <line nr="225">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
      </line>
      <line nr="226">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
      </line>
      <line nr="227">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
      </line>
      <line nr="228">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
      </line>
      <line nr="229">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
      </line>
      <line nr="231">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
      </line>
      <line nr="235">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
      </line>
      <line nr="236">
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
      </line>
      <line nr="239">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
      </line>
      <line nr="247">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
      </line>
      <line nr="249">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
      </line>
      <line nr="261">
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
      </line>
      <line nr="262">
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
      </line>
      <line nr="265">
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
      </line>
      <line nr="275">
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
      </line>
      <line nr="277">
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
      </line>
      <line nr="278">
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
      </line>
      <line nr="281">
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
      </line>
      <line nr="282">
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
      </line>
      <line nr="283">
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
      </line>
      <line nr="284">
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
      </line>
      <line nr="288">
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
      </line>
      <line nr="296">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="297">
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
      </line>
      <line nr="300">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="301">
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
      </line>
      <line nr="302">
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
      </line>
      <line nr="304">
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
      </line>
      <line nr="306">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="307">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="309">
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
      </line>
      <line nr="318">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="319">
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
      </line>
      <line nr="322">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="323">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="326">
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
      </line>
      <line nr="335">
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
      </line>
      <line nr="336">
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
      </line>
      <line nr="339">
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
      </line>
      <line nr="340">
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
      </line>
      <line nr="343">
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
      </line>
      <line nr="351">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="352">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="362">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="367">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="368">
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
      </line>
      <line nr="369">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="371">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="380">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="389">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="390">
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="393">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="402">
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
      </line>
      <line nr="411">
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
      </line>
      <line nr="412">
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
      </line>
      <line nr="415">
        <covered by="phpunit\InsertTest::testInsertError"/>
      </line>
      <line nr="425">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="433">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
      </line>
      <line nr="434">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
      </line>
      <line nr="435">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
      </line>
      <line nr="436">
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
      </line>
      <line nr="439">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
      </line>
      <line nr="442">
        <covered by="phpunit\DeleteTest::testDeleteError"/>
      </line>
      <line nr="450">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="451">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="452">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="453">
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="456">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="467">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
      </line>
      <line nr="468">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
      </line>
      <line nr="472">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
      </line>
      <line nr="481">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="483">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="484">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="486">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="500">
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="501">
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="517">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="518">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="527">
        <covered by="phpunit\InsertTest::testReplaceOne"/>
      </line>
      <line nr="529">
        <covered by="phpunit\InsertTest::testReplaceOne"/>
      </line>
      <line nr="538">
        <covered by="phpunit\InsertTest::testInsertOne"/>
      </line>
      <line nr="540">
        <covered by="phpunit\InsertTest::testInsertOne"/>
      </line>
      <line nr="549">
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
      </line>
      <line nr="550">
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
      </line>
      <line nr="551">
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
      </line>
      <line nr="562">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="563">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="565">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="566">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="567">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="569">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="570">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="574">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="582">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="583">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="584">
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
      </line>
      <line nr="587">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="588">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="589">
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
      </line>
      <line nr="590">
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
      </line>
      <line nr="594">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="595">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="596">
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
      </line>
      <line nr="602">
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
      </line>
      <line nr="605">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="610">
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
      </line>
      <line nr="618">
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="620">
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="634">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="635">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="638">
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="639">
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="640">
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="642">
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="643">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="645">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="646">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="648">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="649">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="651">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="652">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="654">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="655">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="656">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="658">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="660">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="663">
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="664">
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
      </line>
      <line nr="665">
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
      </line>
      <line nr="667">
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
      </line>
      <line nr="668">
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
      </line>
      <line nr="671">
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
      </line>
      <line nr="673">
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
      </line>
      <line nr="674">
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
      </line>
      <line nr="676">
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
      </line>
      <line nr="679">
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
      </line>
      <line nr="682">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="684">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="685">
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
      </line>
      <line nr="700">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="701">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="703">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="704">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="705">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="709">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="713">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="714">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="718">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="722">
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="3">
        <token name="T_DOC_COMMENT"> * This file is part of the sshilko/php-sql-mydb package.</token>
      </line>
      <line no="4">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="5">
        <token name="T_DOC_COMMENT"> * (c) Sergei Shilko &lt;contact@sshilko.com&gt;</token>
      </line>
      <line no="6">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="7">
        <token name="T_DOC_COMMENT"> * MIT License</token>
      </line>
      <line no="8">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="9">
        <token name="T_DOC_COMMENT"> * For the full copyright and license information, please view the LICENSE</token>
      </line>
      <line no="10">
        <token name="T_DOC_COMMENT"> * file that was distributed with this source code.</token>
      </line>
      <line no="11">
        <token name="T_DOC_COMMENT"> * @license https://opensource.org/licenses/mit-license.php MIT</token>
      </line>
      <line no="12">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="13"/>
      <line no="14">
        <token name="T_DECLARE">declare</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strict_types</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15"/>
      <line no="16">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sql</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17"/>
      <line no="18">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Psr\Log\LoggerInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="19">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbException\AsyncException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="20">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbException\ConnectException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="21">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbException\DeleteException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="22">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbException\DisconnectException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="23">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbException\InternalException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="24">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbException\TerminationSignalException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="25">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbException\TransactionAutocommitException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="26">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbException\TransactionBeginReadonlyException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="27">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbException\TransactionBeginReadwriteException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="28">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbException\TransactionCommitException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="29">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbException\TransactionIsolationException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="30">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbException\TransactionRollbackException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="31">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbException\UpdateException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="32">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbListener\InternalListener</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="33">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbMysqli\MydbMysqliResultInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="34">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Throwable</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="35">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_map</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="36">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="37">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">explode</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="38">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="39">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_replace</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="40">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="41">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">stripos</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="42">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strpos</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="43">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">substr</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="44"/>
      <line no="45">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="46">
        <token name="T_DOC_COMMENT"> * @author Sergei Shilko &lt;contact@sshilko.com&gt;</token>
      </line>
      <line no="47">
        <token name="T_DOC_COMMENT"> * @license https://opensource.org/licenses/mit-license.php MIT</token>
      </line>
      <line no="48">
        <token name="T_DOC_COMMENT"> * @see https://github.com/sshilko/php-sql-mydb</token>
      </line>
      <line no="49">
        <token name="T_DOC_COMMENT"> * @SuppressWarnings(PHPMD.CouplingBetweenObjects)</token>
      </line>
      <line no="50">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="51">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Mydb</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_STRING">MydbInterface</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="53">
        <token name="T_WHITESPACE">    </token>
        <token name="T_NAME_QUALIFIED">MydbInterface\EncoderInterface</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="54">
        <token name="T_WHITESPACE">    </token>
        <token name="T_NAME_QUALIFIED">MydbInterface\CommandInterface</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">    </token>
        <token name="T_NAME_QUALIFIED">MydbInterface\QueryInterface</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">    </token>
        <token name="T_NAME_QUALIFIED">MydbInterface\DataManipulationStatementsInterface</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">    </token>
        <token name="T_NAME_QUALIFIED">MydbInterface\TransactionInterface</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">    </token>
        <token name="T_NAME_QUALIFIED">MydbInterface\AsyncInterface</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">    </token>
        <token name="T_NAME_QUALIFIED">MydbInterface\AdministrationStatementsInterface</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">    </token>
        <token name="T_NAME_QUALIFIED">MydbInterface\RemoteResourceInterface</token>
      </line>
      <line no="61">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="62"/>
      <line no="63">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbMysqliInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mysqli</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="64"/>
      <line no="65">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbCredentialsInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$credentials</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="66"/>
      <line no="67">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbOptionsInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$options</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="68"/>
      <line no="69">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">LoggerInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$logger</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="70"/>
      <line no="71">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbEnvironmentInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$environment</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="72"/>
      <line no="73">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbQueryBuilderInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryBuilder</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="74"/>
      <line no="75">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbListenerInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$eventListener</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="76"/>
      <line no="77">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$terminating</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="78"/>
      <line no="79">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">MydbCredentialsInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$credentials</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">LoggerInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$logger</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="82">
        <token name="T_WHITESPACE">        </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">MydbOptionsInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$options</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">        </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">MydbMysqliInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mysqli</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">        </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">MydbEnvironmentInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$environment</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="85">
        <token name="T_WHITESPACE">        </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">MydbQueryBuilderInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryBuilder</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">        </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">MydbListenerInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$eventListener</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
      </line>
      <line no="87">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="88">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">credentials</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$credentials</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="89">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$logger</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$options</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbOptions</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mysqli</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbMysqli</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">environment</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$environment</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbEnvironment</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">queryBuilder</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryBuilder</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbQueryBuilder</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">eventListener</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$eventListener</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InternalListener</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="96"/>
      <line no="97">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="98">
        <token name="T_DOC_COMMENT">     * A destructor may be called as soon as there are no references to an object.</token>
      </line>
      <line no="99">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="100">
        <token name="T_DOC_COMMENT">     * @see http://php.net/manual/en/mysqli.close.php</token>
      </line>
      <line no="101">
        <token name="T_DOC_COMMENT">     * @see http://php.net/manual/en/mysqli.ping.php (MysqlND not supports reconnect)</token>
      </line>
      <line no="102">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="103">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="104">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__destruct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="105">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="106">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">terminating</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="107">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">close</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="109"/>
      <line no="110">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="111">
        <token name="T_DOC_COMMENT">     * With MYSQLI_ASYNC (available with mysqlnd), it is possible to perform query asynchronously.</token>
      </line>
      <line no="112">
        <token name="T_DOC_COMMENT">     * mysqli_poll() is then used to get results from such queries.</token>
      </line>
      <line no="113">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="114">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\ConnectException</token>
      </line>
      <line no="115">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">async</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$command</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">connect</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ConnectException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="121"/>
      <line no="122">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isAutocommit</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
      </line>
      <line no="123">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isPersistent</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
      </line>
      <line no="124">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isReadonly</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="125">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">AsyncException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Async is safe only with autocommit=true &amp; non-persistent &amp; rw configuration'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="126">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="127"/>
      <line no="128">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isTransactionOpen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">AsyncException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Detected transaction pending, refusing to execute async query'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="131"/>
      <line no="132">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqliQueryAsync</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$command</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="133">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">AsyncException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Async command failed'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="134">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="135">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="136"/>
      <line no="137">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="138">
        <token name="T_DOC_COMMENT">     * Open connection to remote server</token>
      </line>
      <line no="139">
        <token name="T_DOC_COMMENT">     * @param int $retry retry failed connection attempts</token>
      </line>
      <line no="140">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="141">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="142">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">open</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$retry</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">connect</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$retry</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="145">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="146"/>
      <line no="147">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="148">
        <token name="T_DOC_COMMENT">     * Execute raw SQL query and return results</token>
      </line>
      <line no="149">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="150">
        <token name="T_DOC_COMMENT">     * @phpcs:disable SlevomatCodingStandard.Complexity.Cognitive</token>
      </line>
      <line no="151">
        <token name="T_DOC_COMMENT">     * @phpcs:disable SlevomatCodingStandard.TypeHints.ReturnTypeHint</token>
      </line>
      <line no="152">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="153">
        <token name="T_DOC_COMMENT">     * @psalm-return array&lt;array-key, array&lt;array-key, (float|int|string|null)&gt;&gt;|null</token>
      </line>
      <line no="154">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\ConnectException</token>
      </line>
      <line no="155">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="156">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="157">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">query</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="158">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="159"/>
      <line no="160">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">connect</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="161">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ConnectException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="162">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="163"/>
      <line no="164">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">sendClientRequest</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="165">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$packet</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">readServerResponse</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="166"/>
      <line no="167">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$packet</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="168">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="169">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="170"/>
      <line no="171">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$packet</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getFieldCount</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="172">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$packet</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getResult</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="173">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="174">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">onError</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="175">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InternalException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$packet</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Reading of the result set failed'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="176">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$query</token>
      </line>
      <line no="177">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="178">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="179"/>
      <line no="180">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="181">
        <token name="T_DOC_COMMENT">             * @var array&lt;array-key, array&lt;array-key, (float|int|string|null)&gt;&gt; $payload</token>
      </line>
      <line no="182">
        <token name="T_DOC_COMMENT">             */</token>
      </line>
      <line no="183">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$payload</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="184">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="185"/>
      <line no="186">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="187">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="188"/>
      <line no="189">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="190">
        <token name="T_DOC_COMMENT">     * @phpcs:disable SlevomatCodingStandard.Complexity.Cognitive</token>
      </line>
      <line no="191">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="192">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="193">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">command</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="194">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="195">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">connect</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="196">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ConnectException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="197">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="198"/>
      <line no="199"/>
      <line no="200">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">sendClientRequest</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="201"/>
      <line no="202">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="203">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="204">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="205"/>
      <line no="206">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$packet</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">readServerResponse</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="207"/>
      <line no="208">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$packet</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="209">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="210"/>
      <line no="211">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="212">
        <token name="T_DOC_COMMENT">     * @return array&lt;string&gt;</token>
      </line>
      <line no="213">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="214">
        <token name="T_DOC_COMMENT">     * @psalm-return list&lt;string&gt;</token>
      </line>
      <line no="215">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="216">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getEnumValues</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$column</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="217">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="218">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">queryBuilder</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">showColumnsLike</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$column</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="219"/>
      <line no="220">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$resultArray</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">query</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="221">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$resultArray</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Type'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="222">
        <token name="T_WHITESPACE">                </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$resultArray</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Type'</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="223">
        <token name="T_WHITESPACE">                </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="224"/>
      <line no="225">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$match</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="226">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$types</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'enum'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'set'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="227">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$types</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$type</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="228">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">stripos</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$type</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'('</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="229">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$match</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$type</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="230"/>
      <line no="231">
        <token name="T_WHITESPACE">                </token>
        <token name="T_BREAK">break</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="232">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="233">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="234"/>
      <line no="235">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$match</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="236">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">onError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Column not of type '"</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">','</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$types</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"'"</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="237">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="238"/>
      <line no="239">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$input</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INT_CAST">(int)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strpos</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'('</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="240"/>
      <line no="241">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// @codeCoverageIgnoreStart</token>
      </line>
      <line no="242">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$input</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$input</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="243">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="244">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="245">
        <token name="T_WHITESPACE">        </token>
        <token name="T_COMMENT">// @codeCoverageIgnoreEnd</token>
      </line>
      <line no="246"/>
      <line no="247">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">explode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">','</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_replace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"/'/"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$input</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="248"/>
      <line no="249">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_map</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'strval'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="250">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="251"/>
      <line no="252">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="253">
        <token name="T_DOC_COMMENT">     * @param float|int|string|\sql\MydbExpressionInterface|null $unescaped</token>
      </line>
      <line no="254">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\ConnectException</token>
      </line>
      <line no="255">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="256">
        <token name="T_DOC_COMMENT">     * @SuppressWarnings(PHPMD.NPathComplexity)</token>
      </line>
      <line no="257">
        <token name="T_DOC_COMMENT">     * @todo reduce NPathComplexity</token>
      </line>
      <line no="258">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="259">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"'"</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="260">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="261">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">connect</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="262">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ConnectException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="263">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="264"/>
      <line no="265">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">queryBuilder</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="266">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="267"/>
      <line no="268">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="269">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="270">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\ConnectException</token>
      </line>
      <line no="271">
        <token name="T_DOC_COMMENT">     * @return ?array&lt;string&gt;</token>
      </line>
      <line no="272">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="273">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getPrimaryKeys</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="274">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="275">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">query</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">queryBuilder</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">showKeys</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="276"/>
      <line no="277">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="278">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="279">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="280"/>
      <line no="281">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$keys</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="282">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="283">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Key_name'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'PRIMARY'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Key_name'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Column_name'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="284">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$keys</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$row</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Column_name'</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="285">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="286">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="287"/>
      <line no="288">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$keys</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$keys</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="289">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="290"/>
      <line no="291">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="292">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="293">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="294">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">beginTransaction</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="295">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="296">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">connect</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="297">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ConnectException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="298">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="299"/>
      <line no="300">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isReadonly</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="301">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">beginTransactionReadonly</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="302">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="303">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="304">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">onError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TransactionBeginReadonlyException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="305">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="306">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">beginTransactionReadwrite</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="307">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="308">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="309">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">onError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TransactionBeginReadwriteException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="310">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="311">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="312"/>
      <line no="313">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="314">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="315">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="316">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">rollbackTransaction</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="317">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="318">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isConnected</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="319">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ConnectException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="320">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="321"/>
      <line no="322">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">rollback</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="323">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="324">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="325"/>
      <line no="326">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">onError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TransactionRollbackException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="327">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="328"/>
      <line no="329">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="330">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\ConnectException</token>
      </line>
      <line no="331">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="332">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="333">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">commitTransaction</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="334">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="335">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isConnected</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="336">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ConnectException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="337">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="338"/>
      <line no="339">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">commit</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="340">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="341">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="342"/>
      <line no="343">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">onError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TransactionCommitException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="344">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="345"/>
      <line no="346">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="347">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="348">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="349">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">close</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="350">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="351">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isConnected</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="352">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="353">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="354"/>
      <line no="355">
        <token name="T_WHITESPACE">        </token>
        <token name="T_TRY">try</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="356">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="357">
        <token name="T_DOC_COMMENT">             * No autocommit</token>
      </line>
      <line no="358">
        <token name="T_DOC_COMMENT">             * No transaction</token>
      </line>
      <line no="359">
        <token name="T_DOC_COMMENT">             *</token>
      </line>
      <line no="360">
        <token name="T_DOC_COMMENT">             * Default: commit all commands if transaction was NOT open</token>
      </line>
      <line no="361">
        <token name="T_DOC_COMMENT">             */</token>
      </line>
      <line no="362">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isAutocommit</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isTransactionOpen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="363">
        <token name="T_WHITESPACE">                </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="364">
        <token name="T_DOC_COMMENT">                 * RELEASE clause causes the server to disconnect the current client session</token>
      </line>
      <line no="365">
        <token name="T_DOC_COMMENT">                 * after terminating the current transaction.</token>
      </line>
      <line no="366">
        <token name="T_DOC_COMMENT">                 */</token>
      </line>
      <line no="367">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$commit</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isPersistent</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="368">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">commit</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="369">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">commitAndRelease</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="370"/>
      <line no="371">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$commit</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="372">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">onError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TransactionCommitException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="373">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="374">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="375"/>
      <line no="376">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="377">
        <token name="T_DOC_COMMENT">             * Explicitly closing open connections and freeing result sets is optional but recommended</token>
      </line>
      <line no="378">
        <token name="T_DOC_COMMENT">             * Server already closed connection from server-side</token>
      </line>
      <line no="379">
        <token name="T_DOC_COMMENT">             */</token>
      </line>
      <line no="380">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">close</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="381">
        <token name="T_WHITESPACE">                </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DisconnectException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="382">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="383">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">MydbException</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="384">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">onError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="385">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CATCH">catch</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">Throwable</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="386">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">onError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InternalException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$e</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMessage</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="387">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="388"/>
      <line no="389">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">terminating</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="390">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="391">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="392"/>
      <line no="393">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">environment</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">gc_collect_cycles</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="394">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="395"/>
      <line no="396">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="397">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\ConnectException</token>
      </line>
      <line no="398">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="399">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="400">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">replace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
      </line>
      <line no="401">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="402">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">insert</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="403">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="404"/>
      <line no="405">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="406">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\ConnectException</token>
      </line>
      <line no="407">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="408">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="409">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">insert</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
      </line>
      <line no="410">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="411">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">command</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="412">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getInsertId</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="413">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="414"/>
      <line no="415">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="416">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="417"/>
      <line no="418">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="419">
        <token name="T_DOC_COMMENT">     * @phpcs:disable SlevomatCodingStandard.TypeHints.ReturnTypeHint</token>
      </line>
      <line no="420">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="421">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\ConnectException</token>
      </line>
      <line no="422">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="423">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">select</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="424">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="425">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">query</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="426">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="427"/>
      <line no="428">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="429">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="430">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="431">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">delete</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">int</token>
      </line>
      <line no="432">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="433">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">command</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="434">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$rows</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getAffectedRows</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="435">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$rows</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="436">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">onError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DeleteException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="437">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="438"/>
      <line no="439">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$rows</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="440">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="441"/>
      <line no="442">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="443">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="444"/>
      <line no="445">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="446">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="447">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="448">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">update</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">int</token>
      </line>
      <line no="449">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="450">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">command</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="451">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$rows</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getAffectedRows</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="452">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$rows</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="453">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">onError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">UpdateException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="454">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="455"/>
      <line no="456">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$rows</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="457">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="458"/>
      <line no="459">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="460">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="461"/>
      <line no="462">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="463">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="464">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="465">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">deleteWhere</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$whereFields</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$whereNotFields</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">int</token>
      </line>
      <line no="466">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="467">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">queryBuilder</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildDeleteWhere</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$whereFields</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$whereNotFields</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="468">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="469">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="470">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="471"/>
      <line no="472">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">delete</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="473">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="474"/>
      <line no="475">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="476">
        <token name="T_DOC_COMMENT">     * @param array&lt;string, (float|int|string|\sql\MydbExpressionInterface|null)&gt; $update</token>
      </line>
      <line no="477">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="478">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="479">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">updateWhere</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$update</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$whereFields</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$whereNotFields</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="480">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="481">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">queryBuilder</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildUpdateWhere</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$update</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$whereFields</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$whereNotFields</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="482"/>
      <line no="483">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="484">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$affectedRows</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">update</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="485"/>
      <line no="486">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$affectedRows</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="487">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="488"/>
      <line no="489">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="490">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="491"/>
      <line no="492">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="493">
        <token name="T_DOC_COMMENT">     * @param array $columnSetWhere ['col1' =&gt; [ ['current1', 'new1'], ['current2', 'new2']]</token>
      </line>
      <line no="494">
        <token name="T_DOC_COMMENT">     * @param array $where ['col2' =&gt; 'value2', 'col3' =&gt; ['v3', 'v4']]</token>
      </line>
      <line no="495">
        <token name="T_DOC_COMMENT">     * @param string $table 'mytable'</token>
      </line>
      <line no="496">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="497">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="498">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">updateWhereMany</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$columnSetWhere</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$where</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="499">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="500">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">queryBuilder</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildUpdateWhereMany</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$columnSetWhere</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$where</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="501">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">update</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="502">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="503"/>
      <line no="504">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="505">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\ConnectException</token>
      </line>
      <line no="506">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="507">
        <token name="T_DOC_COMMENT">     * @psalm-param array&lt;array-key, array&lt;array-key, (float|int|string|\sql\MydbExpressionInterface|null)&gt;&gt; $data</token>
      </line>
      <line no="508">
        <token name="T_DOC_COMMENT">     * @param array&lt;string&gt; $cols</token>
      </line>
      <line no="509">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="510">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">insertMany</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="511">
        <token name="T_WHITESPACE">        </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="512">
        <token name="T_WHITESPACE">        </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$cols</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="513">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="514">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$ignore</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="515">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$onDuplicateSql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
      </line>
      <line no="516">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="517">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">queryBuilder</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildInsertMany</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$cols</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$ignore</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$onDuplicateSql</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="518">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">insert</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="519">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="520"/>
      <line no="521">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="522">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="523">
        <token name="T_DOC_COMMENT">     * @param array&lt;string, (float|int|\sql\MydbExpressionInterface|string|null)&gt; $data</token>
      </line>
      <line no="524">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="525">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">replaceOne</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
      </line>
      <line no="526">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="527">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">queryBuilder</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">insertOne</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbQueryBuilderInterface</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">SQL_REPLACE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="528"/>
      <line no="529">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">replace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="530">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="531"/>
      <line no="532">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="533">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="534">
        <token name="T_DOC_COMMENT">     * @param array&lt;string, (float|int|\sql\MydbExpressionInterface|string|null)&gt; $data</token>
      </line>
      <line no="535">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="536">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">insertOne</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
      </line>
      <line no="537">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="538">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">queryBuilder</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">insertOne</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbQueryBuilderInterface</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">SQL_INSERT</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="539"/>
      <line no="540">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">insert</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="541">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="542"/>
      <line no="543">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="544">
        <token name="T_DOC_COMMENT">     * @see https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html</token>
      </line>
      <line no="545">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="546">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="547">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setTransactionIsolationLevel</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$isolationLevel</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="548">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="549">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$ok</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setTransactionIsolationLevel</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$isolationLevel</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="550">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$ok</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="551">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">onError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TransactionIsolationException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="552">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="553">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="554"/>
      <line no="555">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="556">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\EnvironmentException</token>
      </line>
      <line no="557">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\TerminationSignalException</token>
      </line>
      <line no="558">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\EventException</token>
      </line>
      <line no="559">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="560">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sendClientRequest</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="561">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="562">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">environment</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">startSignalsTrap</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="563">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">environment</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">set_error_handler</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="564"/>
      <line no="565">
        <token name="T_WHITESPACE">        </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">MydbEvent\InternalQueryBegin</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">notify</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="566">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">realQuery</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="567">
        <token name="T_WHITESPACE">        </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">MydbEvent\InternalQueryEnd</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">notify</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="568"/>
      <line no="569">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">environment</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">restore_error_handler</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="570">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">environment</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">endSignalsTrap</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="571">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TerminationSignalException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="572">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="573"/>
      <line no="574">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="575">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="576"/>
      <line no="577">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="578">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="579">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="580">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">readServerResponse</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">MydbMysqliResultInterface</token>
      </line>
      <line no="581">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="582">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$packet</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">readServerResponse</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">environment</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="583">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$packet</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="584">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="585">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="586"/>
      <line no="587">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$warnings</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$packet</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getWarnings</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="588">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$warnings</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="589">
        <token name="T_WHITESPACE">            </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$warnings</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$warningMessage</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="590">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">onWarning</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$warningMessage</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="591">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="592">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="593"/>
      <line no="594">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$errorMessage</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$packet</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="595">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$errorMessage</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="596">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isServerGone</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="597">
        <token name="T_WHITESPACE">                </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="598">
        <token name="T_DOC_COMMENT">                 * server closed connection</token>
      </line>
      <line no="599">
        <token name="T_DOC_COMMENT">                 */</token>
      </line>
      <line no="600">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">close</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="601">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="602">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">onError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InternalException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$errorMessage</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="603">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="604"/>
      <line no="605">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$packet</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="606">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="607"/>
      <line no="608">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">onWarning</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$warningMessage</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="609">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="610">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">warning</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$warningMessage</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'sql'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="611">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="612"/>
      <line no="613">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="614">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="615">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="616">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">onError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">MydbException</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="617">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="618">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">logger</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMessage</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'sql'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="619"/>
      <line no="620">
        <token name="T_WHITESPACE">        </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$exception</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="621">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="622"/>
      <line no="623">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="624">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\DisconnectException</token>
      </line>
      <line no="625">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\TransactionAutocommitException</token>
      </line>
      <line no="626">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\EnvironmentException</token>
      </line>
      <line no="627">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\EventException</token>
      </line>
      <line no="628">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException</token>
      </line>
      <line no="629">
        <token name="T_DOC_COMMENT">     * @SuppressWarnings(PHPMD.NPathComplexity)</token>
      </line>
      <line no="630">
        <token name="T_DOC_COMMENT">     * @todo reduce NPathComplexity</token>
      </line>
      <line no="631">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="632">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">connect</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$retry</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="633">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="634">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isConnected</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="635">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="636">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="637"/>
      <line no="638">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$connected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="639">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$init0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">init</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="640">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$init1</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$init0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setTransportOptions</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">environment</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="641"/>
      <line no="642">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$init0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$init1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="643">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$reportingLevel</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">environment</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">error_reporting</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getErrorReporting</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="644"/>
      <line no="645">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$host</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isPersistent</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'p:'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">credentials</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getHost</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="646">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$dbname</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">credentials</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getDbname</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="647"/>
      <line no="648">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">MydbEvent\InternalConnectionBegin</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$host</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$dbname</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">notify</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="649">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$connected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">realConnect</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="650">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$host</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="651">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">credentials</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getUsername</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="652">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">credentials</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getPasswd</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="653">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$dbname</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="654">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">credentials</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getPort</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="655">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">credentials</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getSocket</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="656">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">credentials</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getFlags</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="657">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="658">
        <token name="T_WHITESPACE">            </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">MydbEvent\InternalConnectionEnd</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$host</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$dbname</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$connected</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">notify</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="659"/>
      <line no="660">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">environment</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">error_reporting</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$reportingLevel</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="661">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="662"/>
      <line no="663">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$connected</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="664">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$errorNumber</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getConnectErrno</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getErrNo</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="665">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$errorText</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getConnectError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="666"/>
      <line no="667">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">close</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="668">
        <token name="T_WHITESPACE">                </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">DisconnectException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="669">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="670"/>
      <line no="671">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">onWarning</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$errorNumber</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$errorText</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="672"/>
      <line no="673">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$retry</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="674">
        <token name="T_WHITESPACE">                </token>
        <token name="T_DEC">--</token>
        <token name="T_VARIABLE">$retry</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="675"/>
      <line no="676">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">connect</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$retry</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="677">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="678"/>
      <line no="679">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="680">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="681"/>
      <line no="682">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqliReport</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getClientErrorLevel</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="683"/>
      <line no="684">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">autocommit</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isAutocommit</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="685">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TransactionAutocommitException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="686">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="687"/>
      <line no="688">
        <token name="T_WHITESPACE">        </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="689">
        <token name="T_DOC_COMMENT">         * Here's a summary of what variables are set by each statement: SET NAMES vs SET CHARSET</token>
      </line>
      <line no="690">
        <token name="T_DOC_COMMENT">         *</token>
      </line>
      <line no="691">
        <token name="T_DOC_COMMENT">         * Variable                 SET NAMES   SET CHARSET</token>
      </line>
      <line no="692">
        <token name="T_DOC_COMMENT">         * character_set_client     argument    argument</token>
      </line>
      <line no="693">
        <token name="T_DOC_COMMENT">         * character_set_results    argument    argument</token>
      </line>
      <line no="694">
        <token name="T_DOC_COMMENT">         * character_set_connection argument    default for default db</token>
      </line>
      <line no="695">
        <token name="T_DOC_COMMENT">         * collation_connection     argument*   default for default db</token>
      </line>
      <line no="696">
        <token name="T_DOC_COMMENT">         *</token>
      </line>
      <line no="697">
        <token name="T_DOC_COMMENT">         * SET CHARSET doesn't set the connection charset to the charset you specify in the argument,</token>
      </line>
      <line no="698">
        <token name="T_DOC_COMMENT">         * instead it sets it to the charset for your current default database</token>
      </line>
      <line no="699">
        <token name="T_DOC_COMMENT">         */</token>
      </line>
      <line no="700">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$defaults</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">realQuery</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="701">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="702">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"SET time_zone = '%s', wait_timeout = %d, names '%s'"</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="703">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getTimeZone</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="704">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getNonInteractiveTimeout</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="705">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getCharset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="706">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="707">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="708"/>
      <line no="709">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$defaults</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="710">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InternalException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="711">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="712"/>
      <line no="713">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$isoLevel</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getTransactionIsolationLevel</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="714">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$isoLevel</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setTransactionIsolationLevel</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$isoLevel</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="715">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TransactionIsolationException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="716">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="717"/>
      <line no="718">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">options</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">isReadonly</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">beginTransactionReadonly</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="719">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TransactionAutocommitException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="720">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="721"/>
      <line no="722">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="723">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="724">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="725"/>
    </source>
  </file>
</phpunit>
