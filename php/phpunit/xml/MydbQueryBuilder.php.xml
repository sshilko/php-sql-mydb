<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="MydbQueryBuilder.php" path="/">
    <totals>
      <lines total="395" comments="112" code="283" executable="114" executed="114" percent="100.00"/>
      <methods count="10" tested="10" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="sql\MydbQueryBuilder" start="46" executable="114" executed="114" crap="69">
      <namespace name="sql"/>
      <method name="__construct" signature="__construct(sql\MydbMysqli\MydbMysqliEscapeStringInterface $mysqli)" start="51" end="54" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="showColumnsLike" signature="showColumnsLike(string $table, string $column): string" start="59" end="66" crap="3" executable="3" executed="3" coverage="100"/>
      <method name="showKeys" signature="showKeys(string $table): string" start="71" end="78" crap="2" executable="3" executed="3" coverage="100"/>
      <method name="insertOne" signature="insertOne(array $data, string $table, string $type): string" start="85" end="99" crap="4" executable="7" executed="7" coverage="100"/>
      <method name="buildUpdateWhereMany" signature="buildUpdateWhereMany(array $columnSetWhere, array $where, string $table): string" start="108" end="159" crap="10" executable="19" executed="19" coverage="100"/>
      <method name="buildUpdateWhere" signature="buildUpdateWhere(array $update, array $whereFields, string $table, array $whereNotFields): ?string" start="165" end="195" crap="6" executable="12" executed="12" coverage="100"/>
      <method name="buildDeleteWhere" signature="buildDeleteWhere(string $table, array $fields, array $negativeFields): ?string" start="200" end="210" crap="4" executable="4" executed="4" coverage="100"/>
      <method name="buildWhere" signature="buildWhere(array $fields, array $negativeFields, array $likeFields): string" start="217" end="288" crap="15" executable="32" executed="32" coverage="100"/>
      <method name="buildInsertMany" signature="buildInsertMany(array $data, array $cols, string $table, bool $ignore, string $onDuplicate): string" start="295" end="334" crap="7" executable="13" executed="13" coverage="100"/>
      <method name="escape" signature="escape($unescaped, string $quote): string" start="343" end="393" crap="17" executable="20" executed="20" coverage="100"/>
    </class>
    <coverage>
      <line nr="53">
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\MysqliTest::testTransactionsWillFinishWhenForcedAutocommit"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertReplaceOneException"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testEscape"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;like null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhereException"/>
        <covered by="phpunit\QueryBuilderTest::testBuildInsertManyException"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException7"/>
        <covered by="phpunit\QueryBuilderTest::testbuildDeleteWhereExceptions"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions5"/>
        <covered by="phpunit\RepositoryTest::testRegistry"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testTransactionExceptionOnPersistentClose"/>
        <covered by="phpunit\ResourceTest::testTransactionExceptionOnNonPersistentClose"/>
        <covered by="phpunit\ResourceTest::testDisconnectExceptionOnClose"/>
        <covered by="phpunit\ResourceTest::testUncaughtExceptionBecomesInternalExceptionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\ResourceTest::testConnectingDefaultsFailed"/>
        <covered by="phpunit\ResourceTest::testConnectingTransactionIsolationFailed"/>
        <covered by="phpunit\ResourceTest::testConnectingTransactionAutocommitFailed"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\SelectTest::testTerminationDuringQuery"/>
        <covered by="phpunit\SelectTest::testServerGoneDuringQuery"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
        <covered by="phpunit\UpdateTest::testUpdateReturnsNull"/>
      </line>
      <line nr="61">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
      </line>
      <line nr="62">
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
      </line>
      <line nr="65">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
      </line>
      <line nr="73">
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
      </line>
      <line nr="74">
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
      </line>
      <line nr="77">
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
      </line>
      <line nr="87">
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertReplaceOneException"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
      </line>
      <line nr="88">
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertReplaceOneException"/>
      </line>
      <line nr="91">
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
      </line>
      <line nr="93">
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
      </line>
      <line nr="94">
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
      </line>
      <line nr="95">
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
      </line>
      <line nr="98">
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
      </line>
      <line nr="110">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException7"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="111">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException1"/>
      </line>
      <line nr="114">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException7"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="119">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException7"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="123">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException7"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="124">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException3"/>
      </line>
      <line nr="129">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException7"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="131">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException7"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="132">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException7"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="133">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereManyException7"/>
      </line>
      <line nr="136">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="137">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="142">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="143">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="149">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="152">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="154">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="155">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="158">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="171">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions5"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="172">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions5"/>
      </line>
      <line nr="175">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions3"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="176">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions3"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="178">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="183">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="184">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="187">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="189">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="190">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="191">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="194">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="202">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testbuildDeleteWhereExceptions"/>
      </line>
      <line nr="203">
        <covered by="phpunit\QueryBuilderTest::testbuildDeleteWhereExceptions"/>
      </line>
      <line nr="206">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
      </line>
      <line nr="209">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
      </line>
      <line nr="219">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;like null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhereException"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions3"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="220">
        <covered by="phpunit\QueryBuilderTest::testBuildWhereException"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereExceptions3"/>
      </line>
      <line nr="223">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;like null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="228">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;like null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="232">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;like null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="233">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;like null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="234">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;like null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="240">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;like null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="241">
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;like null&quot;"/>
      </line>
      <line nr="242">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="243">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="244">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="249">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="250">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="251">
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
      </line>
      <line nr="253">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="254">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="258">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="260">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="262">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="263">
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
      </line>
      <line nr="266">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="267">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="268">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="271">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;like null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="272">
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
      </line>
      <line nr="275">
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
      </line>
      <line nr="277">
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
      </line>
      <line nr="281">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;like null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="284">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;like null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="285">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;like null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="287">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;like null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="297">
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\QueryBuilderTest::testBuildInsertManyException"/>
      </line>
      <line nr="298">
        <covered by="phpunit\QueryBuilderTest::testBuildInsertManyException"/>
      </line>
      <line nr="305">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="306">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="312">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="317">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="321">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="324">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="326">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="327">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="329">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="330">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="333">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="345">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testEscape"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="346">
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #24"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #25"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #26"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #27"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #28"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #29"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #30"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #31"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #32"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #33"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #34"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #35"/>
      </line>
      <line nr="349">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testEscape"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="350">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #12"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #13"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #14"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #15"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #16"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #17"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #18"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #19"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #20"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #21"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #22"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #23"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="356">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testEscape"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="357">
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
      </line>
      <line nr="358">
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
      </line>
      <line nr="362">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testEscape"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="366">
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="367">
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="374">
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
      </line>
      <line nr="375">
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;expression8&quot;"/>
      </line>
      <line nr="379">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testEscape"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="380">
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
      </line>
      <line nr="383">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testEscape"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="384">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotFound"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyComposite"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative null array count &gt;1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;simple array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set &quot;negative array count 1&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #0"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #1"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #2"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #3"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #4"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #5"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #6"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #7"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #8"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #9"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #10"/>
        <covered by="phpunit\QueryBuilderTest::testBuildWhere with data set #11"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="387">
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testEscape"/>
      </line>
      <line nr="388">
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testEscape"/>
      </line>
      <line nr="389">
        <covered by="phpunit\QueryBuilderTest::testEscape"/>
      </line>
      <line nr="392">
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="3">
        <token name="T_DOC_COMMENT"> * This file is part of the sshilko/php-sql-mydb package.</token>
      </line>
      <line no="4">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="5">
        <token name="T_DOC_COMMENT"> * (c) Sergei Shilko &lt;contact@sshilko.com&gt;</token>
      </line>
      <line no="6">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="7">
        <token name="T_DOC_COMMENT"> * MIT License</token>
      </line>
      <line no="8">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="9">
        <token name="T_DOC_COMMENT"> * For the full copyright and license information, please view the LICENSE</token>
      </line>
      <line no="10">
        <token name="T_DOC_COMMENT"> * file that was distributed with this source code.</token>
      </line>
      <line no="11">
        <token name="T_DOC_COMMENT"> * @license https://opensource.org/licenses/mit-license.php MIT</token>
      </line>
      <line no="12">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="13"/>
      <line no="14">
        <token name="T_DECLARE">declare</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strict_types</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15"/>
      <line no="16">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sql</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17"/>
      <line no="18">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbException\QueryBuilderEscapeException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="19">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbException\QueryBuilderException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="20">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbMysqli\MydbMysqliEscapeStringInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="21">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_map</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="22">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="23">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="24">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">in_array</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="25">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_array</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="26">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_float</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="27">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_int</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="28">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="29">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_object</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="30">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_string</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="31">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_subclass_of</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="32">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">key</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="33">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_match</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="34">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="35">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strlen</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="36">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strpos</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="37">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strtoupper</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="38">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">substr</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="39">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">trim</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="40"/>
      <line no="41">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="42">
        <token name="T_DOC_COMMENT"> * @author Sergei Shilko &lt;contact@sshilko.com&gt;</token>
      </line>
      <line no="43">
        <token name="T_DOC_COMMENT"> * @license https://opensource.org/licenses/mit-license.php MIT</token>
      </line>
      <line no="44">
        <token name="T_DOC_COMMENT"> * @see https://github.com/sshilko/php-sql-mydb</token>
      </line>
      <line no="45">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="46">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbQueryBuilder</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbQueryBuilderInterface</token>
      </line>
      <line no="47">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="48"/>
      <line no="49">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbMysqliEscapeStringInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mysqli</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="50"/>
      <line no="51">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">MydbMysqliEscapeStringInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mysqli</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="53">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mysqli</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="54">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="55"/>
      <line no="56">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="57">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="58">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">showColumnsLike</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$column</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$column</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">QueryBuilderException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="63">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="64"/>
      <line no="65">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"SHOW COLUMNS FROM "</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">" LIKE "</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$column</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="67"/>
      <line no="68">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="69">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="70">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">showKeys</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">QueryBuilderException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="76"/>
      <line no="77">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'SHOW KEYS FROM '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="79"/>
      <line no="80">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="81">
        <token name="T_DOC_COMMENT">     * @param array&lt;string, (float|int|\sql\MydbExpressionInterface|string|null)&gt; $data</token>
      </line>
      <line no="82">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="83">
        <token name="T_DOC_COMMENT">     * @psalm-return string</token>
      </line>
      <line no="84">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="85">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">insertOne</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$type</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="87">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="88">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">QueryBuilderException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="89">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="90"/>
      <line no="91">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$names</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="92"/>
      <line no="93">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$name</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$names</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$name</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="96">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="97"/>
      <line no="98">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'%s INTO %s (%s) VALUES (%s)'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$type</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">','</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$names</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">','</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="100"/>
      <line no="101">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="102">
        <token name="T_DOC_COMMENT">     * @param array  $columnSetWhere ['col1' =&gt; [ ['current1', 'new1'], ['current2', 'new2']]</token>
      </line>
      <line no="103">
        <token name="T_DOC_COMMENT">     * @param array  $where          ['col2' =&gt; 'value2', 'col3' =&gt; ['v3', 'v4']]</token>
      </line>
      <line no="104">
        <token name="T_DOC_COMMENT">     * @param string $table          'mytable'</token>
      </line>
      <line no="105">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="106">
        <token name="T_DOC_COMMENT">     * @phpcs:disable SlevomatCodingStandard.Complexity.Cognitive.ComplexityTooHigh</token>
      </line>
      <line no="107">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">buildUpdateWhereMany</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$columnSetWhere</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$where</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="109">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="110">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">QueryBuilderException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="112">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="113"/>
      <line no="114">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'UPDATE '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">        </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="116">
        <token name="T_DOC_COMMENT">         * @phpcs:disable Generic.Files.LineLength.TooLong</token>
      </line>
      <line no="117">
        <token name="T_DOC_COMMENT">         * @var array&lt;array-key, array&lt;array-key, array&lt;array-key, (float|int|string|\sql\MydbExpressionInterface|null)&gt;&gt;&gt; $columnSetWhere</token>
      </line>
      <line no="118">
        <token name="T_DOC_COMMENT">         */</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$columnSetWhere</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$column</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$updateValuesMap</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="121">
        <token name="T_DOC_COMMENT">             * @psalm-suppress DocblockTypeContradiction</token>
      </line>
      <line no="122">
        <token name="T_DOC_COMMENT">             */</token>
      </line>
      <line no="123">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$column</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$updateValuesMap</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$updateValuesMap</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="124">
        <token name="T_WHITESPACE">                </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">QueryBuilderException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="125">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="126">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="127">
        <token name="T_DOC_COMMENT">             * @psalm-suppress InvalidOperand</token>
      </line>
      <line no="128">
        <token name="T_DOC_COMMENT">             */</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' SET '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$column</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' = CASE'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="130"/>
      <line no="131">
        <token name="T_WHITESPACE">            </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$updateValuesMap</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$newValueWhere</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="132">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$newValueWhere</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$newValueWhere</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">2</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$newValueWhere</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="133">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">QueryBuilderException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="134">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="135"/>
      <line no="136">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$escapedWhereValue</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$newValueWhere</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="137">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$escapedThenValue</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$newValueWhere</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="138"/>
      <line no="139">
        <token name="T_WHITESPACE">                </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="140">
        <token name="T_DOC_COMMENT">                 * @psalm-suppress InvalidOperand</token>
      </line>
      <line no="141">
        <token name="T_DOC_COMMENT">                 */</token>
      </line>
      <line no="142">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' WHEN ('</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$column</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' = '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$escapedWhereValue</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">')'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' THEN '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$escapedThenValue</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="145"/>
      <line no="146">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="147">
        <token name="T_DOC_COMMENT">             * @psalm-suppress InvalidOperand</token>
      </line>
      <line no="148">
        <token name="T_DOC_COMMENT">             */</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' ELSE '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$column</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="150">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="151"/>
      <line no="152">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' END'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="153"/>
      <line no="154">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$where</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="155">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildWhere</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$where</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="156">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="157"/>
      <line no="158">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="159">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="160"/>
      <line no="161">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="162">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="163">
        <token name="T_DOC_COMMENT">     * @param array&lt;string, (float|int|string|\sql\MydbExpressionInterface|null)&gt; $update</token>
      </line>
      <line no="164">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="165">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">buildUpdateWhere</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="166">
        <token name="T_WHITESPACE">        </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$update</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="167">
        <token name="T_WHITESPACE">        </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$whereFields</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="168">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="169">
        <token name="T_WHITESPACE">        </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$whereNotFields</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="170">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="171">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$update</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_int</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">key</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$update</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="172">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">QueryBuilderException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="173">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="174"/>
      <line no="175">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="176">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$queryWhere</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildWhere</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$whereFields</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$whereNotFields</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="177"/>
      <line no="178">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$update</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="179"/>
      <line no="180">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="181">
        <token name="T_DOC_COMMENT">             * @psalm-suppress RedundantCastGivenDocblockType</token>
      </line>
      <line no="182">
        <token name="T_DOC_COMMENT">             */</token>
      </line>
      <line no="183">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$f</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' = '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="184">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$f</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="185">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="186"/>
      <line no="187">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$queryUpdate</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">', '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="188"/>
      <line no="189">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'UPDATE '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' SET '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryUpdate</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="190">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryWhere</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="191">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryWhere</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="192">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="193"/>
      <line no="194">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="195">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="196"/>
      <line no="197">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="198">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="199">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="200">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">buildDeleteWhere</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$fields</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$negativeFields</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
      </line>
      <line no="201">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="202">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$fields</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">key</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$fields</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="203">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">QueryBuilderException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="204">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="205"/>
      <line no="206">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$queryWhere</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildWhere</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$fields</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$negativeFields</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="207"/>
      <line no="208">
        <token name="T_WHITESPACE">        </token>
        <token name="T_DOC_COMMENT">/** @lang text */</token>
      </line>
      <line no="209">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'DELETE FROM '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryWhere</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="210">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="211"/>
      <line no="212">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="213">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="214">
        <token name="T_DOC_COMMENT">     * @todo will this need real db connection to escape()? add test for all possible cases</token>
      </line>
      <line no="215">
        <token name="T_DOC_COMMENT">     * @phpcs:disable SlevomatCodingStandard.Complexity.Cognitive.ComplexityTooHigh</token>
      </line>
      <line no="216">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="217">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">buildWhere</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$fields</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$negativeFields</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$likeFields</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="218">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="219">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$fields</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="220">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">QueryBuilderException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="221">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="222"/>
      <line no="223">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$where</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="224"/>
      <line no="225">
        <token name="T_WHITESPACE">        </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="226">
        <token name="T_DOC_COMMENT">         * @psalm-var float|int|string|array|\sql\MydbExpressionInterface|null $value</token>
      </line>
      <line no="227">
        <token name="T_DOC_COMMENT">         */</token>
      </line>
      <line no="228">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$fields</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="229">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="230">
        <token name="T_DOC_COMMENT">             * @psalm-suppress InvalidOperand</token>
      </line>
      <line no="231">
        <token name="T_DOC_COMMENT">             */</token>
      </line>
      <line no="232">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="233">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$isNegative</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$negativeFields</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="234">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$inNull</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="235"/>
      <line no="236">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="237">
        <token name="T_DOC_COMMENT">             * @TODO Expression support?</token>
      </line>
      <line no="238">
        <token name="T_DOC_COMMENT">             */</token>
      </line>
      <line no="239"/>
      <line no="240">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="241">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' IS '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$isNegative</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'NOT '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'NULL'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="242">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="243">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$isNegative</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' NOT'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">" IN ("</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="244">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$inVals</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="245"/>
      <line no="246">
        <token name="T_WHITESPACE">                </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="247">
        <token name="T_DOC_COMMENT">                 * @psalm-var float|int|string|\sql\MydbExpressionInterface|null $val</token>
      </line>
      <line no="248">
        <token name="T_DOC_COMMENT">                 */</token>
      </line>
      <line no="249">
        <token name="T_WHITESPACE">                </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$val</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="250">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$val</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="251">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_VARIABLE">$inNull</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="252">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="253">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_VARIABLE">$inValEscaped</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$val</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="254">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_VARIABLE">$inVals</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inValEscaped</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="255">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="256">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="257"/>
      <line no="258">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">','</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inVals</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">')'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="259">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="260">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$equality</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$isNegative</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'!'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"="</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="261"/>
      <line no="262">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$likeFields</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="263">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$equality</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$isNegative</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' NOT '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"LIKE "</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="264">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="265"/>
      <line no="266">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$equality</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="267">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$queryPartEscaped</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="268">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryPartEscaped</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="269">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="270"/>
      <line no="271">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$inNull</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="272">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="273">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' (%s %s %s IS %s) '</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="274">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="275">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$isNegative</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'AND'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'OR'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="276">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="277">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$isNegative</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'NOT NULL'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'NULL'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="278">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="279">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="280"/>
      <line no="281">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$where</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="282">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="283"/>
      <line no="284">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$condition</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="285">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$condition</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' AND '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$where</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="286"/>
      <line no="287">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'WHERE '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">trim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' AND '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$condition</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="288">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="289"/>
      <line no="290">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="291">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="292">
        <token name="T_DOC_COMMENT">     * @see https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html</token>
      </line>
      <line no="293">
        <token name="T_DOC_COMMENT">     * @param array&lt;string&gt; $cols</token>
      </line>
      <line no="294">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="295">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">buildInsertMany</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$cols</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$ignore</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$onDuplicate</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="296">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="297">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$cols</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="298">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">QueryBuilderException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="299">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="300"/>
      <line no="301">
        <token name="T_WHITESPACE">        </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="302">
        <token name="T_DOC_COMMENT">         * @phpcs:disable SlevomatCodingStandard.Functions.DisallowArrowFunction</token>
      </line>
      <line no="303">
        <token name="T_DOC_COMMENT">         * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="304">
        <token name="T_DOC_COMMENT">         */</token>
      </line>
      <line no="305">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$mapper</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$item</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="306">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$escapedArgs</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="307">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">', '</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="308">
        <token name="T_WHITESPACE">                </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="309">
        <token name="T_DOC_COMMENT">                 * @psalm-var float|int|string|\sql\MydbExpressionInterface|null $input</token>
      </line>
      <line no="310">
        <token name="T_DOC_COMMENT">                 * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="311">
        <token name="T_DOC_COMMENT">                 */</token>
      </line>
      <line no="312">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">array_map</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$input</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="313">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="314">
        <token name="T_DOC_COMMENT">                         * @psalm-var float|int|string|\sql\MydbExpressionInterface|null $input</token>
      </line>
      <line no="315">
        <token name="T_DOC_COMMENT">                         * @phan-suppress-next-line PhanThrowTypeAbsentForCall</token>
      </line>
      <line no="316">
        <token name="T_DOC_COMMENT">                         */</token>
      </line>
      <line no="317">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$input</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="318">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$item</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="319">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="320"/>
      <line no="321">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'('</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$escapedArgs</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">')'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="322">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="323"/>
      <line no="324">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_map</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$mapper</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="325"/>
      <line no="326">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"INSERT "</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$ignore</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'IGNORE '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"INTO "</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">" "</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="327">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"("</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">', '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$cols</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">") VALUES "</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">', '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="328"/>
      <line no="329">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$onDuplicate</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$ignore</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="330">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' ON DUPLICATE KEY UPDATE '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$onDuplicate</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="331">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="332"/>
      <line no="333">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="334">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="335"/>
      <line no="336">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="337">
        <token name="T_DOC_COMMENT">     * @param float|int|string|\sql\MydbExpressionInterface|null $unescaped</token>
      </line>
      <line no="338">
        <token name="T_DOC_COMMENT">     * @SuppressWarnings(PHPMD.NPathComplexity)</token>
      </line>
      <line no="339">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="340">
        <token name="T_DOC_COMMENT">     * @todo reduce NPathComplexity</token>
      </line>
      <line no="341">
        <token name="T_DOC_COMMENT">     * @phpcs:disable SlevomatCodingStandard.Complexity.Cognitive.ComplexityTooHigh</token>
      </line>
      <line no="342">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="343">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"'"</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="344">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="345">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_float</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="346">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="347">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="348"/>
      <line no="349">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_int</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="350">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="351">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="352"/>
      <line no="353">
        <token name="T_WHITESPACE">        </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="354">
        <token name="T_DOC_COMMENT">         * Not quoting '0x...' decimal values</token>
      </line>
      <line no="355">
        <token name="T_DOC_COMMENT">         */</token>
      </line>
      <line no="356">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strpos</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'0x'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_match</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/^[a-zA-Z0-9]+$/'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="357">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PERCENT">%</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">2</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="358">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'0x'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strtoupper</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">2</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="359">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="360">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="361"/>
      <line no="362">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_object</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="363">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="364">
        <token name="T_DOC_COMMENT">             * PHP &lt;=7.4</token>
      </line>
      <line no="365">
        <token name="T_DOC_COMMENT">             */</token>
      </line>
      <line no="366">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INSTANCEOF">instanceof</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbExpressionInterface</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="367">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="368">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="369"/>
      <line no="370">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="371">
        <token name="T_DOC_COMMENT">             * PHP &gt;=8.0</token>
      </line>
      <line no="372">
        <token name="T_DOC_COMMENT">             * @psalm-suppress ArgumentTypeCoercion</token>
      </line>
      <line no="373">
        <token name="T_DOC_COMMENT">             */</token>
      </line>
      <line no="374">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_subclass_of</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Stringable'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="375">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="376">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="377">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="378"/>
      <line no="379">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_null</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="380">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="381">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="382"/>
      <line no="383">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">preg_match</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/^(\w)*$/'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_match</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/^(\w\s)*$/'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="384">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="385">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="386"/>
      <line no="387">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">realEscapeString</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="388">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="389">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">QueryBuilderException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">QueryBuilderEscapeException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMessage</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="390">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="391"/>
      <line no="392">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="393">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="394">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="395"/>
    </source>
  </file>
</phpunit>
