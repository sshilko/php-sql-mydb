<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="MydbQueryBuilder.php" path="/">
    <totals>
      <lines total="327" comments="84" code="243" executable="98" executed="86" percent="87.76"/>
      <methods count="10" tested="5" percent="50.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="sql\MydbQueryBuilder" start="42" executable="98" executed="86" crap="53.41">
      <namespace name="sql"/>
      <method name="__construct" signature="__construct(sql\MydbMysqli\MydbMysqliEscapeStringInterface $mysqli)" start="47" end="50" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="showColumnsLike" signature="showColumnsLike(string $table, string $column): string" start="55" end="58" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="showKeys" signature="showKeys(string $table): string" start="63" end="66" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="insertOne" signature="insertOne(array $data, string $table, string $type): string" start="73" end="83" crap="2" executable="5" executed="5" coverage="100"/>
      <method name="buildUpdateWhereMany" signature="buildUpdateWhereMany(array $columnSetWhere, array $where, string $table): string" start="91" end="133" crap="5.01" executable="15" executed="14" coverage="93.333333333333"/>
      <method name="buildUpdateWhere" signature="buildUpdateWhere(array $update, array $whereFields, string $table, array $whereNotFields): ?string" start="139" end="163" crap="4.02" executable="9" executed="8" coverage="88.888888888889"/>
      <method name="buildDeleteWhere" signature="buildDeleteWhere(string $table, array $fields, array $negativeFields): ?string" start="168" end="178" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="buildWhere" signature="buildWhere(array $fields, array $negativeFields, array $likeFields): string" start="185" end="246" crap="17.93" executable="34" executed="26" coverage="76.470588235294"/>
      <method name="buildInsertMany" signature="buildInsertMany(array $data, array $cols, string $table, bool $ignore, string $onDuplicate): string" start="251" end="279" crap="3.01" executable="11" executed="10" coverage="90.909090909091"/>
      <method name="escape" signature="escape($unescaped, string $quote): string" start="288" end="325" crap="15.05" executable="17" executed="16" coverage="94.117647058824"/>
    </class>
    <coverage>
      <line nr="49">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="57">
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
      </line>
      <line nr="65">
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
      </line>
      <line nr="75">
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
      </line>
      <line nr="77">
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
      </line>
      <line nr="78">
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
      </line>
      <line nr="79">
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
      </line>
      <line nr="82">
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
      </line>
      <line nr="93">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="99">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="103">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="105">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="106">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="110">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="111">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="116">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="117">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="123">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="126">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="128">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="129">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="132">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="145">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="146">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="148">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="152">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="153">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="156">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="158">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="159">
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="170">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
      </line>
      <line nr="172">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
      </line>
      <line nr="173">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
      </line>
      <line nr="177">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
      </line>
      <line nr="187">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="189">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="193">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="194">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="195">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="197">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="199">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="200">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="206">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="207">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="209">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="210">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="213">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="214">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="218">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="221">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="223">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="227">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="228">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="229">
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
      </line>
      <line nr="232">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="236">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="239">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="241">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="242">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="245">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="257">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="258">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="260">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="262">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="266">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="269">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="271">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="272">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="274">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="278">
        <covered by="phpunit\InsertTest::testInsertMany"/>
      </line>
      <line nr="290">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="291">
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
      </line>
      <line nr="294">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="295">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="301">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="302">
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
      </line>
      <line nr="303">
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
      </line>
      <line nr="307">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="308">
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="311">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="312">
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
      </line>
      <line nr="315">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="316">
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple int&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;simple float&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;expression&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;raw null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string caps null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string lowercase null&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x even&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;simple&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testBuildUpdateWhereMany with data set &quot;prefixed simple&quot;"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
      </line>
      <line nr="319">
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
      </line>
      <line nr="320">
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
      </line>
      <line nr="324">
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\QueryBuilderTest::testShowColumnsLike"/>
        <covered by="phpunit\QueryBuilderTest::testShowKeys"/>
        <covered by="phpunit\QueryBuilderTest::testInsertOne with data set &quot;string 0x mismatch&quot;"/>
        <covered by="phpunit\QueryBuilderTest::testReplaceOne with data set &quot;string 0x mismatch&quot;"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="3">
        <token name="T_DOC_COMMENT"> * This file is part of the sshilko/php-sql-mydb package.</token>
      </line>
      <line no="4">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="5">
        <token name="T_DOC_COMMENT"> * (c) Sergei Shilko &lt;contact@sshilko.com&gt;</token>
      </line>
      <line no="6">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="7">
        <token name="T_DOC_COMMENT"> * MIT License</token>
      </line>
      <line no="8">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="9">
        <token name="T_DOC_COMMENT"> * For the full copyright and license information, please view the LICENSE</token>
      </line>
      <line no="10">
        <token name="T_DOC_COMMENT"> * file that was distributed with this source code.</token>
      </line>
      <line no="11">
        <token name="T_DOC_COMMENT"> * @license https://opensource.org/licenses/mit-license.php MIT</token>
      </line>
      <line no="12">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="13"/>
      <line no="14">
        <token name="T_DECLARE">declare</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strict_types</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15"/>
      <line no="16">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sql</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17"/>
      <line no="18">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sql</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">MydbException</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">QueryBuilderEscapeException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="19">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sql</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">MydbException</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">QueryBuilderException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="20">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sql</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">MydbMysqli</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">MydbMysqliEscapeStringInterface</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="21">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_map</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="22">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="23">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="24">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">in_array</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="25">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_array</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="26">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_float</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="27">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_int</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="28">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="29">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_string</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="30">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_match</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="31">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="32">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strlen</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="33">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strpos</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="34">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strtoupper</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="35">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">substr</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="36"/>
      <line no="37">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="38">
        <token name="T_DOC_COMMENT"> * @author Sergei Shilko &lt;contact@sshilko.com&gt;</token>
      </line>
      <line no="39">
        <token name="T_DOC_COMMENT"> * @license https://opensource.org/licenses/mit-license.php MIT</token>
      </line>
      <line no="40">
        <token name="T_DOC_COMMENT"> * @see https://github.com/sshilko/php-sql-mydb</token>
      </line>
      <line no="41">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="42">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbQueryBuilder</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbQueryBuilderInterface</token>
      </line>
      <line no="43">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="44"/>
      <line no="45">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbMysqliEscapeStringInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mysqli</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="46"/>
      <line no="47">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">MydbMysqliEscapeStringInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mysqli</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$mysqli</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="51"/>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="53">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="54">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">showColumnsLike</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$column</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"SHOW COLUMNS FROM "</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">" LIKE "</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$column</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="59"/>
      <line no="60">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="61">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="62">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="63">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">showKeys</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'SHOW KEYS FROM '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="67"/>
      <line no="68">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="69">
        <token name="T_DOC_COMMENT">     * @param array&lt;string, (float|int|\sql\MydbExpression|string|null)&gt; $data</token>
      </line>
      <line no="70">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="71">
        <token name="T_DOC_COMMENT">     * @psalm-return string</token>
      </line>
      <line no="72">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">insertOne</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$type</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$names</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="76"/>
      <line no="77">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$name</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$names</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$name</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="81"/>
      <line no="82">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'%s INTO %s (%s) VALUES (%s)'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$type</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">','</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$names</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">','</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="84"/>
      <line no="85">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="86">
        <token name="T_DOC_COMMENT">     * @param array  $columnSetWhere ['col1' =&gt; [ ['current1', 'new1'], ['current2', 'new2']]</token>
      </line>
      <line no="87">
        <token name="T_DOC_COMMENT">     * @param array  $where          ['col2' =&gt; 'value2', 'col3' =&gt; ['v3', 'v4']]</token>
      </line>
      <line no="88">
        <token name="T_DOC_COMMENT">     * @param string $table          'mytable'</token>
      </line>
      <line no="89">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="90">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">buildUpdateWhereMany</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$columnSetWhere</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$where</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'UPDATE '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">        </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="95">
        <token name="T_DOC_COMMENT">         * @phpcs:disable SlevomatCodingStandard.Files.LineLength.LineTooLong</token>
      </line>
      <line no="96">
        <token name="T_DOC_COMMENT">         * @phpcs:disable Generic.Files.LineLength.TooLong</token>
      </line>
      <line no="97">
        <token name="T_DOC_COMMENT">         * @var array&lt;array-key, array&lt;array-key, array&lt;array-key, (float|int|string|\sql\MydbExpression|null)&gt;&gt;&gt; $columnSetWhere</token>
      </line>
      <line no="98">
        <token name="T_DOC_COMMENT">         */</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$columnSetWhere</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$column</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$map</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="100">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="101">
        <token name="T_DOC_COMMENT">             * @psalm-suppress InvalidOperand</token>
      </line>
      <line no="102">
        <token name="T_DOC_COMMENT">             */</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' SET '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$column</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' = CASE'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="104"/>
      <line no="105">
        <token name="T_WHITESPACE">            </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$map</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$newValueWhere</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="106">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$newValueWhere</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$newValueWhere</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="107">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">QueryBuilderException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="109"/>
      <line no="110">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$escapedWhereValue</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$newValueWhere</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$escapedThenValue</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$newValueWhere</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="112"/>
      <line no="113">
        <token name="T_WHITESPACE">                </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="114">
        <token name="T_DOC_COMMENT">                 * @psalm-suppress InvalidOperand</token>
      </line>
      <line no="115">
        <token name="T_DOC_COMMENT">                 */</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' WHEN ('</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$column</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' = '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$escapedWhereValue</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">')'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' THEN '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$escapedThenValue</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="119"/>
      <line no="120">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="121">
        <token name="T_DOC_COMMENT">             * @psalm-suppress InvalidOperand</token>
      </line>
      <line no="122">
        <token name="T_DOC_COMMENT">             */</token>
      </line>
      <line no="123">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' ELSE '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$column</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="124">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="125"/>
      <line no="126">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' END'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="127"/>
      <line no="128">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$where</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' WHERE '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildWhere</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$where</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="131"/>
      <line no="132">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$sql</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="133">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="134"/>
      <line no="135">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="136">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="137">
        <token name="T_DOC_COMMENT">     * @param array&lt;string, (float|int|string|\sql\MydbExpression|null)&gt; $update</token>
      </line>
      <line no="138">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="139">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">buildUpdateWhere</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="140">
        <token name="T_WHITESPACE">        </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$update</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="141">
        <token name="T_WHITESPACE">        </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$whereFields</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="142">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">        </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$whereNotFields</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="145">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="146">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$queryWhere</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildWhere</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$whereFields</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$whereNotFields</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="147"/>
      <line no="148">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$update</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="150">
        <token name="T_DOC_COMMENT">             * @psalm-suppress RedundantCastGivenDocblockType</token>
      </line>
      <line no="151">
        <token name="T_DOC_COMMENT">             */</token>
      </line>
      <line no="152">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$f</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' = '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="153">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$f</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="154">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="155"/>
      <line no="156">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$queryUpdate</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">', '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="157"/>
      <line no="158">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryUpdate</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryWhere</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="159">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'UPDATE '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' SET '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryUpdate</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' WHERE '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryWhere</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="160">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="161"/>
      <line no="162">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="163">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="164"/>
      <line no="165">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="166">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="167">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="168">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">buildDeleteWhere</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$fields</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$negativeFields</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
      </line>
      <line no="169">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="170">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$queryWhere</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">buildWhere</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$fields</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$negativeFields</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="171"/>
      <line no="172">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryWhere</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="173">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="174">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="175"/>
      <line no="176">
        <token name="T_WHITESPACE">        </token>
        <token name="T_DOC_COMMENT">/** @lang text */</token>
      </line>
      <line no="177">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'DELETE FROM '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' WHERE '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryWhere</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="178">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="179"/>
      <line no="180">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="181">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="182">
        <token name="T_DOC_COMMENT">     * @todo will this need real db connection to escape()? add test for all possible cases</token>
      </line>
      <line no="183">
        <token name="T_DOC_COMMENT">     * @phpcs:disable SlevomatCodingStandard.Complexity.Cognitive.ComplexityTooHigh</token>
      </line>
      <line no="184">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="185">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">buildWhere</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$fields</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$negativeFields</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$likeFields</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="186">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="187">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$where</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="188"/>
      <line no="189">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$fields</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="190">
        <token name="T_WHITESPACE">            </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="191">
        <token name="T_DOC_COMMENT">             * @psalm-suppress InvalidOperand</token>
      </line>
      <line no="192">
        <token name="T_DOC_COMMENT">             */</token>
      </line>
      <line no="193">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="194">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$isNegative</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$negativeFields</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="195">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$inNull</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="196"/>
      <line no="197">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="198">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' IS '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$isNegative</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'NOT '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'NULL'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="199">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="200">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="201">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$qvalue</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="202">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$isNegative</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'!'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'='</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="203">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$queryPartEscaped</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$qvalue</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="204">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryPartEscaped</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="205">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="206">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$isNegative</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' NOT'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">" IN ("</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="207">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$inVals</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="208"/>
      <line no="209">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$val</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="210">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$val</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="211">
        <token name="T_WHITESPACE">                            </token>
        <token name="T_VARIABLE">$inNull</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="212">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="213">
        <token name="T_WHITESPACE">                            </token>
        <token name="T_VARIABLE">$inValEscaped</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$val</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="214">
        <token name="T_WHITESPACE">                            </token>
        <token name="T_VARIABLE">$inVals</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inValEscaped</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="215">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="216">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="217"/>
      <line no="218">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">','</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inVals</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">')'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="219">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="220">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="221">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$equality</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$isNegative</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'!'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"="</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="222"/>
      <line no="223">
        <token name="T_WHITESPACE">                </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$likeFields</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="224">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$equality</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$isNegative</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' NOT '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">" LIKE "</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="225">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="226"/>
      <line no="227">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$equality</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="228">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$queryPartEscaped</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="229">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryPartEscaped</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="230">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="231"/>
      <line no="232">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$inNull</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="233">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' ( %s OR %s IS NULL ) '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="234">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="235"/>
      <line no="236">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$where</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$queryPart</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="237">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="238"/>
      <line no="239">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$condition</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="240"/>
      <line no="241">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$where</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="242">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$condition</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' AND '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$where</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="243">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="244"/>
      <line no="245">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' AND '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$condition</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="246">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="247"/>
      <line no="248">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="249">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="250">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="251">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">buildInsertMany</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$cols</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$ignore</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$onDuplicate</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="252">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="253">
        <token name="T_WHITESPACE">        </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="254">
        <token name="T_DOC_COMMENT">         * @phpcs:disable SlevomatCodingStandard.Functions.DisallowArrowFunction</token>
      </line>
      <line no="255">
        <token name="T_DOC_COMMENT">         * @psalm-suppress MissingClosureParamType</token>
      </line>
      <line no="256">
        <token name="T_DOC_COMMENT">         */</token>
      </line>
      <line no="257">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$mapper</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$item</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="258">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$escapedArgs</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="259">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">', '</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="260">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">array_map</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$input</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="261">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_DOC_COMMENT">/** @phan-suppress-next-line PhanThrowTypeAbsentForCall */</token>
      </line>
      <line no="262">
        <token name="T_WHITESPACE">                        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$input</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="263">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$item</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="264">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="265"/>
      <line no="266">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'('</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$escapedArgs</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">')'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="267">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="268"/>
      <line no="269">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_map</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$mapper</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="270"/>
      <line no="271">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"INSERT "</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$ignore</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'IGNORE '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"INTO "</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$table</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">" "</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="272">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"("</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">', '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$cols</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">") VALUES "</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">', '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$values</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="273"/>
      <line no="274">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$onDuplicate</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="275">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONCAT_EQUAL">.=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' ON DUPLICATE KEY UPDATE '</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$onDuplicate</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="276">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="277"/>
      <line no="278">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$query</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="279">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="280"/>
      <line no="281">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="282">
        <token name="T_DOC_COMMENT">     * @param float|int|string|\sql\MydbExpression|null $unescaped</token>
      </line>
      <line no="283">
        <token name="T_DOC_COMMENT">     * @SuppressWarnings(PHPMD.NPathComplexity)</token>
      </line>
      <line no="284">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\QueryBuilderException</token>
      </line>
      <line no="285">
        <token name="T_DOC_COMMENT">     * @todo reduce NPathComplexity</token>
      </line>
      <line no="286">
        <token name="T_DOC_COMMENT">     * @phpcs:disable SlevomatCodingStandard.Complexity.Cognitive.ComplexityTooHigh</token>
      </line>
      <line no="287">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="288">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">escape</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"'"</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="289">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="290">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_float</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="291">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="292">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="293"/>
      <line no="294">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_int</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="295">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="296">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="297"/>
      <line no="298">
        <token name="T_WHITESPACE">        </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="299">
        <token name="T_DOC_COMMENT">         * Not quoting '0x...' decimal values</token>
      </line>
      <line no="300">
        <token name="T_DOC_COMMENT">         */</token>
      </line>
      <line no="301">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strpos</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'0x'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_match</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/^[a-zA-Z0-9]+$/'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="302">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PERCENT">%</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">2</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="303">
        <token name="T_WHITESPACE">                </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'0x'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strtoupper</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">2</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="304">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="305">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="306"/>
      <line no="307">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INSTANCEOF">instanceof</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbExpression</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="308">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING_CAST">(string)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="309">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="310"/>
      <line no="311">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">is_null</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="312">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="313">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="314"/>
      <line no="315">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">preg_match</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/^(\w)*$/'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_match</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/^(\w\s)*$/'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="316">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="317">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="318"/>
      <line no="319">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">mysqli</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">realEscapeString</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="320">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="321">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">QueryBuilderException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">QueryBuilderEscapeException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unescaped</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getMessage</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="322">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="323"/>
      <line no="324">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$quote</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="325">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="326">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="327"/>
    </source>
  </file>
</phpunit>
