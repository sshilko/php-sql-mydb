<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="MydbRegistry.php" path="/">
    <totals>
      <lines total="206" comments="82" code="124" executable="28" executed="28" percent="100.00"/>
      <methods count="15" tested="15" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="sql\MydbRegistry" start="38" executable="28" executed="28" crap="21">
      <namespace name="sql"/>
      <method name="serialize" signature="serialize(): ?string" start="49" end="52" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="unserialize" signature="unserialize($data): void" start="58" end="61" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="current" signature="current(): ?sql\MydbInterface" start="66" end="74" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="key" signature="key(): ?string" start="79" end="87" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="next" signature="next(): void" start="92" end="95" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="rewind" signature="rewind(): void" start="100" end="103" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="valid" signature="valid(): bool" start="110" end="113" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="count" signature="count(): int" start="115" end="118" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="offsetExists" signature="offsetExists($offset): bool" start="127" end="130" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="offsetGet" signature="offsetGet($offset): sql\MydbInterface" start="139" end="146" crap="2" executable="3" executed="3" coverage="100"/>
      <method name="offsetSet" signature="offsetSet($offset, $value): void" start="156" end="165" crap="3" executable="4" executed="4" coverage="100"/>
      <method name="offsetUnset" signature="offsetUnset($offset): void" start="173" end="180" crap="2" executable="3" executed="3" coverage="100"/>
      <method name="__clone" signature="__clone()" start="185" end="188" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="__serialize" signature="__serialize(): array" start="193" end="196" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="__unserialize" signature="__unserialize(array $data): void" start="201" end="204" crap="1" executable="1" executed="1" coverage="100"/>
    </class>
    <coverage>
      <line nr="51">
        <covered by="phpunit\RegistryTest::testRegistrySerialize2"/>
      </line>
      <line nr="60">
        <covered by="phpunit\RegistryTest::testRegistryUnserialize1"/>
      </line>
      <line nr="68">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\RegistryTest::testRegistryEmpty1"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="69">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\RegistryTest::testRegistryEmpty1"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="70">
        <covered by="phpunit\RegistryTest::testRegistryEmpty1"/>
      </line>
      <line nr="73">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="81">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\RegistryTest::testRegistryEmpty2"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="82">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\RegistryTest::testRegistryEmpty2"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="83">
        <covered by="phpunit\RegistryTest::testRegistryEmpty2"/>
      </line>
      <line nr="86">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="94">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="102">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="112">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="117">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\MysqliTest::testReuseResource"/>
        <covered by="phpunit\MysqliTest::testOptionsNoInit"/>
        <covered by="phpunit\MysqliTest::testQueryNoInit"/>
        <covered by="phpunit\MysqliTest::testReadResponseNoInit"/>
        <covered by="phpunit\MysqliTest::testExtractResponseNoInit"/>
        <covered by="phpunit\MysqliTest::testEscapeNoInit"/>
        <covered by="phpunit\MysqliTest::testTransactionsNoInit"/>
        <covered by="phpunit\MysqliTest::testAsyncNoInit"/>
        <covered by="phpunit\MysqliTest::testCloseNoInit"/>
        <covered by="phpunit\MysqliTest::testAffectedRowsNoInit"/>
        <covered by="phpunit\MysqliTest::testWarningsNoInit"/>
        <covered by="phpunit\OptionsTest::testNonInteractiveTimeouts"/>
        <covered by="phpunit\OptionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\OptionsTest::testServerSideSelectTimeouts"/>
        <covered by="phpunit\OptionsTest::testErrorReporting"/>
        <covered by="phpunit\OptionsTest::testReadTimeout"/>
        <covered by="phpunit\OptionsTest::testNetworkBuffer"/>
        <covered by="phpunit\OptionsTest::testNetworkBufferMin"/>
        <covered by="phpunit\OptionsTest::testNetworkBufferMax"/>
        <covered by="phpunit\OptionsTest::testSetReadBuffer"/>
        <covered by="phpunit\OptionsTest::testSetReadBufferMin"/>
        <covered by="phpunit\OptionsTest::testSetReadBufferMax"/>
        <covered by="phpunit\OptionsTest::testMysqliReport"/>
        <covered by="phpunit\OptionsTest::testMysqliReportMin"/>
        <covered by="phpunit\OptionsTest::testMysqliReportMax"/>
        <covered by="phpunit\OptionsTest::testSetTimeZone"/>
        <covered by="phpunit\OptionsTest::testAutocommit"/>
        <covered by="phpunit\OptionsTest::testCharset"/>
        <covered by="phpunit\OptionsTest::testPersistent"/>
        <covered by="phpunit\OptionsTest::testReadonly"/>
        <covered by="phpunit\RegistryTest::testRegistryEmpty1"/>
        <covered by="phpunit\RegistryTest::testRegistryEmpty2"/>
        <covered by="phpunit\RegistryTest::testRegistryEmpty3"/>
        <covered by="phpunit\RegistryTest::testRegistrySet"/>
        <covered by="phpunit\RegistryTest::testRegistryUnSet1"/>
        <covered by="phpunit\RegistryTest::testRegistrySerialize1"/>
        <covered by="phpunit\RegistryTest::testRegistrySerialize2"/>
        <covered by="phpunit\RegistryTest::testRegistryUnserialize1"/>
        <covered by="phpunit\RegistryTest::testRegistryUnserialize2"/>
        <covered by="phpunit\RegistryTest::testRegistryClone"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="129">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\RegistryTest::testRegistryEmpty3"/>
        <covered by="phpunit\RegistryTest::testRegistryUnSet1"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="141">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\RegistryTest::testRegistryEmpty3"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="142">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="145">
        <covered by="phpunit\RegistryTest::testRegistryEmpty3"/>
      </line>
      <line nr="158">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\RegistryTest::testRegistrySet"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="159">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="161">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="164">
        <covered by="phpunit\RegistryTest::testRegistrySet"/>
      </line>
      <line nr="175">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\RegistryTest::testRegistryUnSet1"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="176">
        <covered by="phpunit\RegistryTest::testRegistryUnSet1"/>
      </line>
      <line nr="179">
        <covered by="phpunit\AsyncTest::testAsyncMock"/>
        <covered by="phpunit\AsyncTest::testAsyncNotConnected"/>
        <covered by="phpunit\AsyncTest::testAsyncReadonly"/>
        <covered by="phpunit\AsyncTest::testAsyncNotAutocommit"/>
        <covered by="phpunit\AsyncTest::testAsyncTransactionOpen"/>
        <covered by="phpunit\AsyncTest::testAsyncFailedCommand"/>
        <covered by="phpunit\AsyncTest::testAsyncReal"/>
        <covered by="phpunit\DeleteTest::testDelete"/>
        <covered by="phpunit\DeleteTest::testDeleteError"/>
        <covered by="phpunit\DeleteTest::testDeleteInternalError"/>
        <covered by="phpunit\DeleteTest::testDeleteWhere"/>
        <covered by="phpunit\ExceptionTest::testTableDoesNotExist"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnect"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectAfterRetry"/>
        <covered by="phpunit\ExceptionTest::testFailedToConnectLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommandLazy"/>
        <covered by="phpunit\ExceptionTest::testFailedToBeginTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToRollbackTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToCommitTransaction"/>
        <covered by="phpunit\ExceptionTest::testFailedToEscapeLazy"/>
        <covered by="phpunit\ExceptionTest::testMySqlWarning"/>
        <covered by="phpunit\ExceptionTest::testMySqlError"/>
        <covered by="phpunit\InsertTest::testReplace"/>
        <covered by="phpunit\InsertTest::testReplaceOne"/>
        <covered by="phpunit\InsertTest::testInsertError"/>
        <covered by="phpunit\InsertTest::testInsert"/>
        <covered by="phpunit\InsertTest::testInsertMany"/>
        <covered by="phpunit\InsertTest::testInsertOne"/>
        <covered by="phpunit\MetaTest::testOpen"/>
        <covered by="phpunit\MetaTest::testClose"/>
        <covered by="phpunit\MetaTest::testPrimaryKey"/>
        <covered by="phpunit\MetaTest::testEnum"/>
        <covered by="phpunit\MetaTest::testSet"/>
        <covered by="phpunit\MetaTest::testNotRealEnumOrSet"/>
        <covered by="phpunit\MetaTest::testEscape"/>
        <covered by="phpunit\MetaTest::testSingleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testDoubleQuotedEscape"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyNotDefined"/>
        <covered by="phpunit\MetaTest::testPrimaryKeyQueryFailed"/>
        <covered by="phpunit\ResourceTest::testOpen"/>
        <covered by="phpunit\ResourceTest::testOpenCloseError"/>
        <covered by="phpunit\ResourceTest::testOpenAutocommitFailed"/>
        <covered by="phpunit\ResourceTest::testSimpleClose"/>
        <covered by="phpunit\ResourceTest::testCloseNotConnected"/>
        <covered by="phpunit\ResourceTest::testWillCommitNotPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testWillCommitIsPersistentTransactionWhenNoAutocommitAndNoTransactionOnClose"/>
        <covered by="phpunit\ResourceTest::testNoGcWhenNotConnected"/>
        <covered by="phpunit\ResourceTest::testGcWhenConnected"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenAutocommitEnabledOnClose"/>
        <covered by="phpunit\ResourceTest::testDoNoCommitTransactionWhenTransactionExplicitlyStartedOnClose"/>
        <covered by="phpunit\ResourceTest::testQueryBadClientRequest"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponse"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsZero"/>
        <covered by="phpunit\ResourceTest::testQueryBadServerResponsePacketFieldCountIsNotZeroButBadResult"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;complex select all&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select JOIN&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select UNION&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ORDER BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select WHERE&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select COUNT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select GROUP BY&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select HAVING&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select LIMIT OFFSET&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select ALL&quot;"/>
        <covered by="phpunit\SelectTest::testSimpleSelect with data set &quot;simple select SQL_SMALL_RESULT&quot;"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyReal"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadWriteReal"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevelException"/>
        <covered by="phpunit\TransactionsTest::testTransactionIsolationLevel"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlySuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadonlyFailure"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteSuccess"/>
        <covered by="phpunit\TransactionsTest::testBeginTransactionReadwriteFailure"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testRollbackTransactionFailure"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionSuccess"/>
        <covered by="phpunit\TransactionsTest::testCommitTransactionFailure"/>
        <covered by="phpunit\UpdateTest::testUpdateWhere"/>
        <covered by="phpunit\UpdateTest::testUpdate"/>
        <covered by="phpunit\UpdateTest::testUpdateMany"/>
        <covered by="phpunit\UpdateTest::testUpdateInternalError"/>
      </line>
      <line nr="187">
        <covered by="phpunit\RegistryTest::testRegistryClone"/>
      </line>
      <line nr="195">
        <covered by="phpunit\RegistryTest::testRegistrySerialize1"/>
      </line>
      <line nr="203">
        <covered by="phpunit\RegistryTest::testRegistryUnserialize2"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="3">
        <token name="T_DOC_COMMENT"> * This file is part of the sshilko/php-sql-mydb package.</token>
      </line>
      <line no="4">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="5">
        <token name="T_DOC_COMMENT"> * (c) Sergei Shilko &lt;contact@sshilko.com&gt;</token>
      </line>
      <line no="6">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="7">
        <token name="T_DOC_COMMENT"> * MIT License</token>
      </line>
      <line no="8">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="9">
        <token name="T_DOC_COMMENT"> * For the full copyright and license information, please view the LICENSE</token>
      </line>
      <line no="10">
        <token name="T_DOC_COMMENT"> * file that was distributed with this source code.</token>
      </line>
      <line no="11">
        <token name="T_DOC_COMMENT"> * @license https://opensource.org/licenses/mit-license.php MIT</token>
      </line>
      <line no="12">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="13"/>
      <line no="14">
        <token name="T_DECLARE">declare</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strict_types</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15"/>
      <line no="16">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sql</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17"/>
      <line no="18">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ArrayAccess</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="19">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Countable</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="20">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Iterator</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="21">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Serializable</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="22">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">sql\MydbException\RegistryException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="23">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Traversable</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="24">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="25">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">current</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="26">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">key</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="27">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">next</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="28">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">reset</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="29">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">serialize</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="30"/>
      <line no="31">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="32">
        <token name="T_DOC_COMMENT"> * Singleton or registry helper to manage multiple Mydb instances</token>
      </line>
      <line no="33">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="34">
        <token name="T_DOC_COMMENT"> * @author Sergei Shilko &lt;contact@sshilko.com&gt;</token>
      </line>
      <line no="35">
        <token name="T_DOC_COMMENT"> * @license https://opensource.org/licenses/mit-license.php MIT</token>
      </line>
      <line no="36">
        <token name="T_DOC_COMMENT"> * @see https://github.com/sshilko/php-sql-mydb</token>
      </line>
      <line no="37">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="38">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbRegistry</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ArrayAccess</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Countable</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Traversable</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Iterator</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Serializable</token>
      </line>
      <line no="39">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="40"/>
      <line no="41">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="42">
        <token name="T_DOC_COMMENT">     * @var array&lt;string, \sql\MydbInterface&gt;</token>
      </line>
      <line no="43">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$instance</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="45"/>
      <line no="46">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="47">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\RegistryException</token>
      </line>
      <line no="48">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">serialize</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">        </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">RegistryException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="53"/>
      <line no="54">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="55">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\RegistryException</token>
      </line>
      <line no="56">
        <token name="T_DOC_COMMENT">     * @phpcs:disable SlevomatCodingStandard.Functions.UnusedParameter.UnusedParameter</token>
      </line>
      <line no="57">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">unserialize</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">        </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">RegistryException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">serialize</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="62"/>
      <line no="63">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="64">
        <token name="T_DOC_COMMENT">     * Return the current element</token>
      </line>
      <line no="65">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">current</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">MydbInterface</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">current</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">instance</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="72"/>
      <line no="73">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="75"/>
      <line no="76">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="77">
        <token name="T_DOC_COMMENT">     * Return the key of the current element</token>
      </line>
      <line no="78">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">key</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_STRING">string</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="81">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">key</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">instance</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="82">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="85"/>
      <line no="86">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$result</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="87">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="88"/>
      <line no="89">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="90">
        <token name="T_DOC_COMMENT">     * Move forward to next element</token>
      </line>
      <line no="91">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">next</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">next</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">instance</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="96"/>
      <line no="97">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="98">
        <token name="T_DOC_COMMENT">     * Rewind the Iterator to the first element</token>
      </line>
      <line no="99">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="100">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">rewind</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="101">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="102">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">reset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">instance</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="104"/>
      <line no="105">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="106">
        <token name="T_DOC_COMMENT">     * Checks if current position is valid</token>
      </line>
      <line no="107">
        <token name="T_DOC_COMMENT">     * @return bool The return value will be boolean and then evaluated.</token>
      </line>
      <line no="108">
        <token name="T_DOC_COMMENT">     * Returns true on success or false on failure.</token>
      </line>
      <line no="109">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="110">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">valid</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="111">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="112">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">current</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">instance</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="114"/>
      <line no="115">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">instance</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="119"/>
      <line no="120">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="121">
        <token name="T_DOC_COMMENT">     * Whether an offset exists</token>
      </line>
      <line no="122">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="123">
        <token name="T_DOC_COMMENT">     * @phpcs:disable SlevomatCodingStandard.TypeHints.DisallowMixedTypeHint.DisallowedMixedTypeHint</token>
      </line>
      <line no="124">
        <token name="T_DOC_COMMENT">     * @param string $offset</token>
      </line>
      <line no="125">
        <token name="T_DOC_COMMENT">     * @return bool true on success or false on failure.</token>
      </line>
      <line no="126">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="127">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">offsetExists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$offset</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="128">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ISSET">isset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">instance</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$offset</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="131"/>
      <line no="132">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="133">
        <token name="T_DOC_COMMENT">     * Offset to retrieve</token>
      </line>
      <line no="134">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="135">
        <token name="T_DOC_COMMENT">     * @phpcs:disable SlevomatCodingStandard.TypeHints.DisallowMixedTypeHint.DisallowedMixedTypeHint</token>
      </line>
      <line no="136">
        <token name="T_DOC_COMMENT">     * @param string $offset</token>
      </line>
      <line no="137">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\RegistryException</token>
      </line>
      <line no="138">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="139">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">offsetGet</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$offset</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbInterface</token>
      </line>
      <line no="140">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="141">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">offsetExists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$offset</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="142">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">instance</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$offset</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="144"/>
      <line no="145">
        <token name="T_WHITESPACE">        </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">RegistryException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="146">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="147"/>
      <line no="148">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="149">
        <token name="T_DOC_COMMENT">     * Offset to set</token>
      </line>
      <line no="150">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="151">
        <token name="T_DOC_COMMENT">     * @phpcs:disable SlevomatCodingStandard.TypeHints.DisallowMixedTypeHint.DisallowedMixedTypeHint</token>
      </line>
      <line no="152">
        <token name="T_DOC_COMMENT">     * @param string $offset</token>
      </line>
      <line no="153">
        <token name="T_DOC_COMMENT">     * @param \sql\MydbInterface $value</token>
      </line>
      <line no="154">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\RegistryException</token>
      </line>
      <line no="155">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="156">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">offsetSet</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$offset</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="157">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="158">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INSTANCEOF">instanceof</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MydbInterface</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">offsetExists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$offset</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="159">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">instance</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$offset</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="160"/>
      <line no="161">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="162">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="163"/>
      <line no="164">
        <token name="T_WHITESPACE">        </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">RegistryException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="165">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="166"/>
      <line no="167">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="168">
        <token name="T_DOC_COMMENT">     * Offset to unset</token>
      </line>
      <line no="169">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="170">
        <token name="T_DOC_COMMENT">     * @phpcs:disable SlevomatCodingStandard.TypeHints.DisallowMixedTypeHint.DisallowedMixedTypeHint</token>
      </line>
      <line no="171">
        <token name="T_DOC_COMMENT">     * @param string $offset</token>
      </line>
      <line no="172">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="173">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">offsetUnset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$offset</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="174">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="175">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">offsetExists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$offset</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="176">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="177">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="178"/>
      <line no="179">
        <token name="T_WHITESPACE">        </token>
        <token name="T_UNSET">unset</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">instance</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$offset</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="180">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="181"/>
      <line no="182">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="183">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\RegistryException</token>
      </line>
      <line no="184">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="185">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__clone</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="186">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="187">
        <token name="T_WHITESPACE">        </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">RegistryException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="188">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="189"/>
      <line no="190">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="191">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\RegistryException</token>
      </line>
      <line no="192">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="193">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__serialize</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="194">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="195">
        <token name="T_WHITESPACE">        </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">RegistryException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="196">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="197"/>
      <line no="198">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="199">
        <token name="T_DOC_COMMENT">     * @throws \sql\MydbException\RegistryException</token>
      </line>
      <line no="200">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="201">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__unserialize</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="202">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="203">
        <token name="T_WHITESPACE">        </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">RegistryException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">serialize</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="204">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="205">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="206"/>
    </source>
  </file>
</phpunit>
